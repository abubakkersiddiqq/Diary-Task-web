
🗒️ Project Summary: Diary & Task Web App
----------------------------------------

📁 Project Structure
- app.py — Main Flask application
- templates/ — HTML templates (base.html, home.html, etc.)
- static/ — (Optional) CSS or assets
- tasks.json / diary.txt — Files storing task and diary data

🌐 Routes Overview (Flask)
| Route         | Method(s) | Description |
|---------------|-----------|-------------|
| / or /home    | GET, POST | Home page with choice to go to Task or Diary |
| /task_count   | POST      | Asks how many tasks to add |
| /add_task     | POST      | Displays input fields for tasks |
| /view_task    | POST      | Shows submitted tasks, saves based on user choice |
| /save_diary   | POST, GET | Saves new diary entry, shows old & new together |

📋 Features Implemented
- Add and view tasks (with optional saving)
- Save diary entries with timestamp
- Display previous diary content (if saved)
- UI enhancements: centered forms, styled buttons, tables, boxes

📦 Data Storage
- Tasks: saved to tasks.json
- Diary: appended to diary.txt
- Uses os.path.exists() to check if file exists before reading

🧠 Important Flask Concepts Used
- @app.route() decorators for routing
- request.form.get() to safely access form inputs
- render_template() to render HTML with variables
- HTML with Jinja2 ({{ }} and {% %}) to loop, condition, and include data
- datetime + ZoneInfo for timestamping

🧱 Styling Summary
- Custom CSS added directly inside {% block title %}
- Box layout using margin, padding, box-shadow
- Consistent font-family (Arial, cursive, Georgia)
- Input forms and table styled for usability and readability

🛠️ Suggestions for Improvement (Future Work)
- Move CSS into separate style.css (under /static)
- Use session or flash() for better user feedback
- Add Edit/Delete features for tasks
- Add diary title or tags
- Replace file-based storage with SQLite or AWS (if scaling)
